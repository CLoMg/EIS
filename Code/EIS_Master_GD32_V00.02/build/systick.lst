ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"systick.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.systick_config,"ax",%progbits
  18              		.align	1
  19              		.global	systick_config
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	systick_config:
  25              	.LFB56:
  26              		.file 1 "USER/systick.c"
   1:USER/systick.c **** /*!
   2:USER/systick.c ****     \file    systick.c
   3:USER/systick.c ****     \brief   the systick configuration file
   4:USER/systick.c **** 
   5:USER/systick.c ****     \version 2014-12-26, V1.0.0, firmware for GD32F10x
   6:USER/systick.c ****     \version 2017-06-20, V2.0.0, firmware for GD32F10x
   7:USER/systick.c ****     \version 2018-07-31, V2.1.0, firmware for GD32F10x
   8:USER/systick.c ****     \version 2020-09-30, V2.2.0, firmware for GD32F10x
   9:USER/systick.c **** */
  10:USER/systick.c **** 
  11:USER/systick.c **** /*
  12:USER/systick.c ****     Copyright (c) 2020, GigaDevice Semiconductor Inc.
  13:USER/systick.c **** 
  14:USER/systick.c ****     Redistribution and use in source and binary forms, with or without modification, 
  15:USER/systick.c **** are permitted provided that the following conditions are met:
  16:USER/systick.c **** 
  17:USER/systick.c ****     1. Redistributions of source code must retain the above copyright notice, this 
  18:USER/systick.c ****        list of conditions and the following disclaimer.
  19:USER/systick.c ****     2. Redistributions in binary form must reproduce the above copyright notice, 
  20:USER/systick.c ****        this list of conditions and the following disclaimer in the documentation 
  21:USER/systick.c ****        and/or other materials provided with the distribution.
  22:USER/systick.c ****     3. Neither the name of the copyright holder nor the names of its contributors 
  23:USER/systick.c ****        may be used to endorse or promote products derived from this software without 
  24:USER/systick.c ****        specific prior written permission.
  25:USER/systick.c **** 
  26:USER/systick.c ****     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
  27:USER/systick.c **** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  28:USER/systick.c **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  29:USER/systick.c **** IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  30:USER/systick.c **** INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  31:USER/systick.c **** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  32:USER/systick.c **** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 2


  33:USER/systick.c **** WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  34:USER/systick.c **** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
  35:USER/systick.c **** OF SUCH DAMAGE.
  36:USER/systick.c **** */
  37:USER/systick.c **** 
  38:USER/systick.c **** #include "gd32f10x.h"
  39:USER/systick.c **** #include "systick.h"
  40:USER/systick.c **** 
  41:USER/systick.c **** volatile static uint32_t delay;
  42:USER/systick.c **** 
  43:USER/systick.c **** /*!
  44:USER/systick.c ****     \brief      configure systick
  45:USER/systick.c ****     \param[in]  none
  46:USER/systick.c ****     \param[out] none
  47:USER/systick.c ****     \retval     none
  48:USER/systick.c **** */
  49:USER/systick.c **** void systick_config(void)
  50:USER/systick.c **** {
  27              		.loc 1 50 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  51:USER/systick.c ****     /* setup systick timer for 1000Hz interrupts */
  52:USER/systick.c ****     if (SysTick_Config(SystemCoreClock / 1000U)){
  32              		.loc 1 52 5 view .LVU1
  33              		.loc 1 52 9 is_stmt 0 view .LVU2
  34 0000 0C4B     		ldr	r3, .L4
  35 0002 1B68     		ldr	r3, [r3]
  36 0004 0C4A     		ldr	r2, .L4+4
  37 0006 A2FB0323 		umull	r2, r3, r2, r3
  38 000a 9B09     		lsrs	r3, r3, #6
  39              	.LVL0:
  40              	.LBB10:
  41              	.LBI10:
  42              		.file 2 "CORE/core_cm3.h"
   1:CORE/core_cm3.h **** /**************************************************************************//**
   2:CORE/core_cm3.h ****  * @file     core_cm3.h
   3:CORE/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:CORE/core_cm3.h ****  * @version  V3.30
   5:CORE/core_cm3.h ****  * @date     17. February 2014
   6:CORE/core_cm3.h ****  *
   7:CORE/core_cm3.h ****  * @note
   8:CORE/core_cm3.h ****  *
   9:CORE/core_cm3.h ****  ******************************************************************************/
  10:CORE/core_cm3.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:CORE/core_cm3.h **** 
  12:CORE/core_cm3.h ****    All rights reserved.
  13:CORE/core_cm3.h ****    Redistribution and use in source and binary forms, with or without
  14:CORE/core_cm3.h ****    modification, are permitted provided that the following conditions are met:
  15:CORE/core_cm3.h ****    - Redistributions of source code must retain the above copyright
  16:CORE/core_cm3.h ****      notice, this list of conditions and the following disclaimer.
  17:CORE/core_cm3.h ****    - Redistributions in binary form must reproduce the above copyright
  18:CORE/core_cm3.h ****      notice, this list of conditions and the following disclaimer in the
  19:CORE/core_cm3.h ****      documentation and/or other materials provided with the distribution.
  20:CORE/core_cm3.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:CORE/core_cm3.h ****      to endorse or promote products derived from this software without
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 3


  22:CORE/core_cm3.h ****      specific prior written permission.
  23:CORE/core_cm3.h ****    *
  24:CORE/core_cm3.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:CORE/core_cm3.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:CORE/core_cm3.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:CORE/core_cm3.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:CORE/core_cm3.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:CORE/core_cm3.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:CORE/core_cm3.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:CORE/core_cm3.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:CORE/core_cm3.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:CORE/core_cm3.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:CORE/core_cm3.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:CORE/core_cm3.h ****    ---------------------------------------------------------------------------*/
  36:CORE/core_cm3.h **** 
  37:CORE/core_cm3.h **** 
  38:CORE/core_cm3.h **** #if defined ( __ICCARM__ )
  39:CORE/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:CORE/core_cm3.h **** #endif
  41:CORE/core_cm3.h **** 
  42:CORE/core_cm3.h **** #ifdef __cplusplus
  43:CORE/core_cm3.h ****  extern "C" {
  44:CORE/core_cm3.h **** #endif
  45:CORE/core_cm3.h **** 
  46:CORE/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  47:CORE/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  48:CORE/core_cm3.h **** 
  49:CORE/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:CORE/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:CORE/core_cm3.h **** 
  52:CORE/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:CORE/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  54:CORE/core_cm3.h **** 
  55:CORE/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:CORE/core_cm3.h ****      Unions are used for effective representation of core registers.
  57:CORE/core_cm3.h **** 
  58:CORE/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:CORE/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  60:CORE/core_cm3.h ****  */
  61:CORE/core_cm3.h **** 
  62:CORE/core_cm3.h **** 
  63:CORE/core_cm3.h **** /*******************************************************************************
  64:CORE/core_cm3.h ****  *                 CMSIS definitions
  65:CORE/core_cm3.h ****  ******************************************************************************/
  66:CORE/core_cm3.h **** /** \ingroup Cortex_M3
  67:CORE/core_cm3.h ****   @{
  68:CORE/core_cm3.h ****  */
  69:CORE/core_cm3.h **** 
  70:CORE/core_cm3.h **** /*  CMSIS CM3 definitions */
  71:CORE/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  72:CORE/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL s
  73:CORE/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  74:CORE/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:CORE/core_cm3.h **** 
  76:CORE/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  77:CORE/core_cm3.h **** 
  78:CORE/core_cm3.h **** 
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 4


  79:CORE/core_cm3.h **** #if   defined ( __CC_ARM )
  80:CORE/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:CORE/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:CORE/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  83:CORE/core_cm3.h **** 
  84:CORE/core_cm3.h **** #elif defined ( __GNUC__ )
  85:CORE/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  86:CORE/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  87:CORE/core_cm3.h ****   #define __STATIC_INLINE  static inline
  88:CORE/core_cm3.h **** 
  89:CORE/core_cm3.h **** #elif defined ( __ICCARM__ )
  90:CORE/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  91:CORE/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  92:CORE/core_cm3.h ****   #define __STATIC_INLINE  static inline
  93:CORE/core_cm3.h **** 
  94:CORE/core_cm3.h **** #elif defined ( __TMS470__ )
  95:CORE/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  96:CORE/core_cm3.h ****   #define __STATIC_INLINE  static inline
  97:CORE/core_cm3.h **** 
  98:CORE/core_cm3.h **** #elif defined ( __TASKING__ )
  99:CORE/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:CORE/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:CORE/core_cm3.h ****   #define __STATIC_INLINE  static inline
 102:CORE/core_cm3.h **** 
 103:CORE/core_cm3.h **** #elif defined ( __CSMC__ )  /* Cosmic */
 104:CORE/core_cm3.h ****   #define __packed
 105:CORE/core_cm3.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 106:CORE/core_cm3.h ****   #define __INLINE         inline                                    /*use -pc99 on compile line !<
 107:CORE/core_cm3.h ****   #define __STATIC_INLINE  static inline
 108:CORE/core_cm3.h **** 
 109:CORE/core_cm3.h **** #endif
 110:CORE/core_cm3.h **** 
 111:CORE/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
 112:CORE/core_cm3.h **** */
 113:CORE/core_cm3.h **** #define __FPU_USED       0
 114:CORE/core_cm3.h **** 
 115:CORE/core_cm3.h **** #if defined ( __CC_ARM )
 116:CORE/core_cm3.h ****   #if defined __TARGET_FPU_VFP
 117:CORE/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:CORE/core_cm3.h ****   #endif
 119:CORE/core_cm3.h **** 
 120:CORE/core_cm3.h **** #elif defined ( __GNUC__ )
 121:CORE/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 122:CORE/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 123:CORE/core_cm3.h ****   #endif
 124:CORE/core_cm3.h **** 
 125:CORE/core_cm3.h **** #elif defined ( __ICCARM__ )
 126:CORE/core_cm3.h ****   #if defined __ARMVFP__
 127:CORE/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 128:CORE/core_cm3.h ****   #endif
 129:CORE/core_cm3.h **** 
 130:CORE/core_cm3.h **** #elif defined ( __TMS470__ )
 131:CORE/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 132:CORE/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 133:CORE/core_cm3.h ****   #endif
 134:CORE/core_cm3.h **** 
 135:CORE/core_cm3.h **** #elif defined ( __TASKING__ )
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 5


 136:CORE/core_cm3.h ****   #if defined __FPU_VFP__
 137:CORE/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 138:CORE/core_cm3.h ****   #endif
 139:CORE/core_cm3.h **** 
 140:CORE/core_cm3.h **** #elif defined ( __CSMC__ )    /* Cosmic */
 141:CORE/core_cm3.h ****   #if ( __CSMC__ & 0x400)    // FPU present for parser
 142:CORE/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 143:CORE/core_cm3.h ****   #endif
 144:CORE/core_cm3.h **** #endif
 145:CORE/core_cm3.h **** 
 146:CORE/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 147:CORE/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 148:CORE/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 149:CORE/core_cm3.h **** 
 150:CORE/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 151:CORE/core_cm3.h **** 
 152:CORE/core_cm3.h **** #ifndef __CMSIS_GENERIC
 153:CORE/core_cm3.h **** 
 154:CORE/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 155:CORE/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 156:CORE/core_cm3.h **** 
 157:CORE/core_cm3.h **** /* check device defines and use defaults */
 158:CORE/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 159:CORE/core_cm3.h ****   #ifndef __CM3_REV
 160:CORE/core_cm3.h ****     #define __CM3_REV               0x0200
 161:CORE/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 162:CORE/core_cm3.h ****   #endif
 163:CORE/core_cm3.h **** 
 164:CORE/core_cm3.h ****   #ifndef __MPU_PRESENT
 165:CORE/core_cm3.h ****     #define __MPU_PRESENT             0
 166:CORE/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 167:CORE/core_cm3.h ****   #endif
 168:CORE/core_cm3.h **** 
 169:CORE/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 170:CORE/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 171:CORE/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 172:CORE/core_cm3.h ****   #endif
 173:CORE/core_cm3.h **** 
 174:CORE/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 175:CORE/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 176:CORE/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 177:CORE/core_cm3.h ****   #endif
 178:CORE/core_cm3.h **** #endif
 179:CORE/core_cm3.h **** 
 180:CORE/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 181:CORE/core_cm3.h **** /**
 182:CORE/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 183:CORE/core_cm3.h **** 
 184:CORE/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 185:CORE/core_cm3.h ****     \li to specify the access to peripheral variables.
 186:CORE/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 187:CORE/core_cm3.h **** */
 188:CORE/core_cm3.h **** #ifdef __cplusplus
 189:CORE/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 190:CORE/core_cm3.h **** #else
 191:CORE/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 192:CORE/core_cm3.h **** #endif
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 6


 193:CORE/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 194:CORE/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 195:CORE/core_cm3.h **** 
 196:CORE/core_cm3.h **** /*@} end of group Cortex_M3 */
 197:CORE/core_cm3.h **** 
 198:CORE/core_cm3.h **** 
 199:CORE/core_cm3.h **** 
 200:CORE/core_cm3.h **** /*******************************************************************************
 201:CORE/core_cm3.h ****  *                 Register Abstraction
 202:CORE/core_cm3.h ****   Core Register contain:
 203:CORE/core_cm3.h ****   - Core Register
 204:CORE/core_cm3.h ****   - Core NVIC Register
 205:CORE/core_cm3.h ****   - Core SCB Register
 206:CORE/core_cm3.h ****   - Core SysTick Register
 207:CORE/core_cm3.h ****   - Core Debug Register
 208:CORE/core_cm3.h ****   - Core MPU Register
 209:CORE/core_cm3.h ****  ******************************************************************************/
 210:CORE/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 211:CORE/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 212:CORE/core_cm3.h **** */
 213:CORE/core_cm3.h **** 
 214:CORE/core_cm3.h **** /** \ingroup    CMSIS_core_register
 215:CORE/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 216:CORE/core_cm3.h ****     \brief  Core Register type definitions.
 217:CORE/core_cm3.h ****   @{
 218:CORE/core_cm3.h ****  */
 219:CORE/core_cm3.h **** 
 220:CORE/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 221:CORE/core_cm3.h ****  */
 222:CORE/core_cm3.h **** typedef union
 223:CORE/core_cm3.h **** {
 224:CORE/core_cm3.h ****   struct
 225:CORE/core_cm3.h ****   {
 226:CORE/core_cm3.h **** #if (__CORTEX_M != 0x04)
 227:CORE/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 228:CORE/core_cm3.h **** #else
 229:CORE/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 230:CORE/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 231:CORE/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 232:CORE/core_cm3.h **** #endif
 233:CORE/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 234:CORE/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 235:CORE/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 236:CORE/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 237:CORE/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 238:CORE/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 239:CORE/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 240:CORE/core_cm3.h **** } APSR_Type;
 241:CORE/core_cm3.h **** 
 242:CORE/core_cm3.h **** 
 243:CORE/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 244:CORE/core_cm3.h ****  */
 245:CORE/core_cm3.h **** typedef union
 246:CORE/core_cm3.h **** {
 247:CORE/core_cm3.h ****   struct
 248:CORE/core_cm3.h ****   {
 249:CORE/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 7


 250:CORE/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 251:CORE/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 252:CORE/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 253:CORE/core_cm3.h **** } IPSR_Type;
 254:CORE/core_cm3.h **** 
 255:CORE/core_cm3.h **** 
 256:CORE/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:CORE/core_cm3.h ****  */
 258:CORE/core_cm3.h **** typedef union
 259:CORE/core_cm3.h **** {
 260:CORE/core_cm3.h ****   struct
 261:CORE/core_cm3.h ****   {
 262:CORE/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 263:CORE/core_cm3.h **** #if (__CORTEX_M != 0x04)
 264:CORE/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 265:CORE/core_cm3.h **** #else
 266:CORE/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 267:CORE/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 268:CORE/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 269:CORE/core_cm3.h **** #endif
 270:CORE/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 271:CORE/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 272:CORE/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 273:CORE/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 274:CORE/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 275:CORE/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 276:CORE/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 277:CORE/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 278:CORE/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 279:CORE/core_cm3.h **** } xPSR_Type;
 280:CORE/core_cm3.h **** 
 281:CORE/core_cm3.h **** 
 282:CORE/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 283:CORE/core_cm3.h ****  */
 284:CORE/core_cm3.h **** typedef union
 285:CORE/core_cm3.h **** {
 286:CORE/core_cm3.h ****   struct
 287:CORE/core_cm3.h ****   {
 288:CORE/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 289:CORE/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 290:CORE/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 291:CORE/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 292:CORE/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 293:CORE/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 294:CORE/core_cm3.h **** } CONTROL_Type;
 295:CORE/core_cm3.h **** 
 296:CORE/core_cm3.h **** /*@} end of group CMSIS_CORE */
 297:CORE/core_cm3.h **** 
 298:CORE/core_cm3.h **** 
 299:CORE/core_cm3.h **** /** \ingroup    CMSIS_core_register
 300:CORE/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 301:CORE/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 302:CORE/core_cm3.h ****   @{
 303:CORE/core_cm3.h ****  */
 304:CORE/core_cm3.h **** 
 305:CORE/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 306:CORE/core_cm3.h ****  */
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 8


 307:CORE/core_cm3.h **** typedef struct
 308:CORE/core_cm3.h **** {
 309:CORE/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 310:CORE/core_cm3.h ****        uint32_t RESERVED0[24];
 311:CORE/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 312:CORE/core_cm3.h ****        uint32_t RSERVED1[24];
 313:CORE/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 314:CORE/core_cm3.h ****        uint32_t RESERVED2[24];
 315:CORE/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 316:CORE/core_cm3.h ****        uint32_t RESERVED3[24];
 317:CORE/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 318:CORE/core_cm3.h ****        uint32_t RESERVED4[56];
 319:CORE/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 320:CORE/core_cm3.h ****        uint32_t RESERVED5[644];
 321:CORE/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 322:CORE/core_cm3.h **** }  NVIC_Type;
 323:CORE/core_cm3.h **** 
 324:CORE/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 325:CORE/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 326:CORE/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 327:CORE/core_cm3.h **** 
 328:CORE/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 329:CORE/core_cm3.h **** 
 330:CORE/core_cm3.h **** 
 331:CORE/core_cm3.h **** /** \ingroup  CMSIS_core_register
 332:CORE/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 333:CORE/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 334:CORE/core_cm3.h ****   @{
 335:CORE/core_cm3.h ****  */
 336:CORE/core_cm3.h **** 
 337:CORE/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 338:CORE/core_cm3.h ****  */
 339:CORE/core_cm3.h **** typedef struct
 340:CORE/core_cm3.h **** {
 341:CORE/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 342:CORE/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 343:CORE/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 344:CORE/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 345:CORE/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 346:CORE/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 347:CORE/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 348:CORE/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 349:CORE/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 350:CORE/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 351:CORE/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 352:CORE/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 353:CORE/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 354:CORE/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 355:CORE/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 356:CORE/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 357:CORE/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 358:CORE/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 359:CORE/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 360:CORE/core_cm3.h ****        uint32_t RESERVED0[5];
 361:CORE/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 362:CORE/core_cm3.h **** } SCB_Type;
 363:CORE/core_cm3.h **** 
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 9


 364:CORE/core_cm3.h **** /* SCB CPUID Register Definitions */
 365:CORE/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 366:CORE/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 367:CORE/core_cm3.h **** 
 368:CORE/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 369:CORE/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 370:CORE/core_cm3.h **** 
 371:CORE/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 372:CORE/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 373:CORE/core_cm3.h **** 
 374:CORE/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 375:CORE/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 376:CORE/core_cm3.h **** 
 377:CORE/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 378:CORE/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 379:CORE/core_cm3.h **** 
 380:CORE/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 381:CORE/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 382:CORE/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 383:CORE/core_cm3.h **** 
 384:CORE/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 385:CORE/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 386:CORE/core_cm3.h **** 
 387:CORE/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 388:CORE/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 389:CORE/core_cm3.h **** 
 390:CORE/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 391:CORE/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 392:CORE/core_cm3.h **** 
 393:CORE/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 394:CORE/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 395:CORE/core_cm3.h **** 
 396:CORE/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 397:CORE/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 398:CORE/core_cm3.h **** 
 399:CORE/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 400:CORE/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 401:CORE/core_cm3.h **** 
 402:CORE/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 403:CORE/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 404:CORE/core_cm3.h **** 
 405:CORE/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 406:CORE/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 407:CORE/core_cm3.h **** 
 408:CORE/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 409:CORE/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 410:CORE/core_cm3.h **** 
 411:CORE/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 412:CORE/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 413:CORE/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 414:CORE/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 415:CORE/core_cm3.h **** 
 416:CORE/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 417:CORE/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 418:CORE/core_cm3.h **** #else
 419:CORE/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 420:CORE/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 10


 421:CORE/core_cm3.h **** #endif
 422:CORE/core_cm3.h **** 
 423:CORE/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 424:CORE/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 425:CORE/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 426:CORE/core_cm3.h **** 
 427:CORE/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 428:CORE/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 429:CORE/core_cm3.h **** 
 430:CORE/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 431:CORE/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 432:CORE/core_cm3.h **** 
 433:CORE/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 434:CORE/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 435:CORE/core_cm3.h **** 
 436:CORE/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 437:CORE/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 438:CORE/core_cm3.h **** 
 439:CORE/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 440:CORE/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 441:CORE/core_cm3.h **** 
 442:CORE/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 443:CORE/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 444:CORE/core_cm3.h **** 
 445:CORE/core_cm3.h **** /* SCB System Control Register Definitions */
 446:CORE/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 447:CORE/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 448:CORE/core_cm3.h **** 
 449:CORE/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 450:CORE/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 451:CORE/core_cm3.h **** 
 452:CORE/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 453:CORE/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 454:CORE/core_cm3.h **** 
 455:CORE/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 456:CORE/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 457:CORE/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 458:CORE/core_cm3.h **** 
 459:CORE/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 460:CORE/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 461:CORE/core_cm3.h **** 
 462:CORE/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 463:CORE/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 464:CORE/core_cm3.h **** 
 465:CORE/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 466:CORE/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 467:CORE/core_cm3.h **** 
 468:CORE/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 469:CORE/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 470:CORE/core_cm3.h **** 
 471:CORE/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 472:CORE/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 473:CORE/core_cm3.h **** 
 474:CORE/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 475:CORE/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 476:CORE/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 477:CORE/core_cm3.h **** 
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 11


 478:CORE/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 479:CORE/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 480:CORE/core_cm3.h **** 
 481:CORE/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 482:CORE/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 483:CORE/core_cm3.h **** 
 484:CORE/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 485:CORE/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 486:CORE/core_cm3.h **** 
 487:CORE/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 488:CORE/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 489:CORE/core_cm3.h **** 
 490:CORE/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 491:CORE/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 492:CORE/core_cm3.h **** 
 493:CORE/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 494:CORE/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 495:CORE/core_cm3.h **** 
 496:CORE/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 497:CORE/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 498:CORE/core_cm3.h **** 
 499:CORE/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 500:CORE/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 501:CORE/core_cm3.h **** 
 502:CORE/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 503:CORE/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 504:CORE/core_cm3.h **** 
 505:CORE/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 506:CORE/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 507:CORE/core_cm3.h **** 
 508:CORE/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 509:CORE/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 510:CORE/core_cm3.h **** 
 511:CORE/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 512:CORE/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 513:CORE/core_cm3.h **** 
 514:CORE/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 515:CORE/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 516:CORE/core_cm3.h **** 
 517:CORE/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 518:CORE/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 519:CORE/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 520:CORE/core_cm3.h **** 
 521:CORE/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 522:CORE/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 523:CORE/core_cm3.h **** 
 524:CORE/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 525:CORE/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 526:CORE/core_cm3.h **** 
 527:CORE/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 528:CORE/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 529:CORE/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 530:CORE/core_cm3.h **** 
 531:CORE/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 532:CORE/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 533:CORE/core_cm3.h **** 
 534:CORE/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 12


 535:CORE/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 536:CORE/core_cm3.h **** 
 537:CORE/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 538:CORE/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 539:CORE/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 540:CORE/core_cm3.h **** 
 541:CORE/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 542:CORE/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 543:CORE/core_cm3.h **** 
 544:CORE/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 545:CORE/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 546:CORE/core_cm3.h **** 
 547:CORE/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 548:CORE/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 549:CORE/core_cm3.h **** 
 550:CORE/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 551:CORE/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 552:CORE/core_cm3.h **** 
 553:CORE/core_cm3.h **** /*@} end of group CMSIS_SCB */
 554:CORE/core_cm3.h **** 
 555:CORE/core_cm3.h **** 
 556:CORE/core_cm3.h **** /** \ingroup  CMSIS_core_register
 557:CORE/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 558:CORE/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 559:CORE/core_cm3.h ****   @{
 560:CORE/core_cm3.h ****  */
 561:CORE/core_cm3.h **** 
 562:CORE/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 563:CORE/core_cm3.h ****  */
 564:CORE/core_cm3.h **** typedef struct
 565:CORE/core_cm3.h **** {
 566:CORE/core_cm3.h ****        uint32_t RESERVED0[1];
 567:CORE/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 568:CORE/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 569:CORE/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 570:CORE/core_cm3.h **** #else
 571:CORE/core_cm3.h ****        uint32_t RESERVED1[1];
 572:CORE/core_cm3.h **** #endif
 573:CORE/core_cm3.h **** } SCnSCB_Type;
 574:CORE/core_cm3.h **** 
 575:CORE/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 576:CORE/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 577:CORE/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 578:CORE/core_cm3.h **** 
 579:CORE/core_cm3.h **** /* Auxiliary Control Register Definitions */
 580:CORE/core_cm3.h **** 
 581:CORE/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 582:CORE/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 583:CORE/core_cm3.h **** 
 584:CORE/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 585:CORE/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 586:CORE/core_cm3.h **** 
 587:CORE/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 588:CORE/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 589:CORE/core_cm3.h **** 
 590:CORE/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 591:CORE/core_cm3.h **** 
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 13


 592:CORE/core_cm3.h **** 
 593:CORE/core_cm3.h **** /** \ingroup  CMSIS_core_register
 594:CORE/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 595:CORE/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 596:CORE/core_cm3.h ****   @{
 597:CORE/core_cm3.h ****  */
 598:CORE/core_cm3.h **** 
 599:CORE/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 600:CORE/core_cm3.h ****  */
 601:CORE/core_cm3.h **** typedef struct
 602:CORE/core_cm3.h **** {
 603:CORE/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 604:CORE/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 605:CORE/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 606:CORE/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 607:CORE/core_cm3.h **** } SysTick_Type;
 608:CORE/core_cm3.h **** 
 609:CORE/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 610:CORE/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 611:CORE/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 612:CORE/core_cm3.h **** 
 613:CORE/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 614:CORE/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 615:CORE/core_cm3.h **** 
 616:CORE/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 617:CORE/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 618:CORE/core_cm3.h **** 
 619:CORE/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 620:CORE/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 621:CORE/core_cm3.h **** 
 622:CORE/core_cm3.h **** /* SysTick Reload Register Definitions */
 623:CORE/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 624:CORE/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 625:CORE/core_cm3.h **** 
 626:CORE/core_cm3.h **** /* SysTick Current Register Definitions */
 627:CORE/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 628:CORE/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 629:CORE/core_cm3.h **** 
 630:CORE/core_cm3.h **** /* SysTick Calibration Register Definitions */
 631:CORE/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 632:CORE/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 633:CORE/core_cm3.h **** 
 634:CORE/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 635:CORE/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 636:CORE/core_cm3.h **** 
 637:CORE/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 638:CORE/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 639:CORE/core_cm3.h **** 
 640:CORE/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 641:CORE/core_cm3.h **** 
 642:CORE/core_cm3.h **** 
 643:CORE/core_cm3.h **** /** \ingroup  CMSIS_core_register
 644:CORE/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 645:CORE/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 646:CORE/core_cm3.h ****   @{
 647:CORE/core_cm3.h ****  */
 648:CORE/core_cm3.h **** 
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 14


 649:CORE/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 650:CORE/core_cm3.h ****  */
 651:CORE/core_cm3.h **** typedef struct
 652:CORE/core_cm3.h **** {
 653:CORE/core_cm3.h ****   __O  union
 654:CORE/core_cm3.h ****   {
 655:CORE/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 656:CORE/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 657:CORE/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 658:CORE/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 659:CORE/core_cm3.h ****        uint32_t RESERVED0[864];
 660:CORE/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 661:CORE/core_cm3.h ****        uint32_t RESERVED1[15];
 662:CORE/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 663:CORE/core_cm3.h ****        uint32_t RESERVED2[15];
 664:CORE/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 665:CORE/core_cm3.h ****        uint32_t RESERVED3[29];
 666:CORE/core_cm3.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 667:CORE/core_cm3.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 668:CORE/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 669:CORE/core_cm3.h ****        uint32_t RESERVED4[43];
 670:CORE/core_cm3.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 671:CORE/core_cm3.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 672:CORE/core_cm3.h ****        uint32_t RESERVED5[6];
 673:CORE/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 674:CORE/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 675:CORE/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 676:CORE/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 677:CORE/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 678:CORE/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 679:CORE/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 680:CORE/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 681:CORE/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 682:CORE/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 683:CORE/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 684:CORE/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 685:CORE/core_cm3.h **** } ITM_Type;
 686:CORE/core_cm3.h **** 
 687:CORE/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 688:CORE/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 689:CORE/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 690:CORE/core_cm3.h **** 
 691:CORE/core_cm3.h **** /* ITM Trace Control Register Definitions */
 692:CORE/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 693:CORE/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 694:CORE/core_cm3.h **** 
 695:CORE/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 696:CORE/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 697:CORE/core_cm3.h **** 
 698:CORE/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 699:CORE/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 700:CORE/core_cm3.h **** 
 701:CORE/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 702:CORE/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 703:CORE/core_cm3.h **** 
 704:CORE/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 705:CORE/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 15


 706:CORE/core_cm3.h **** 
 707:CORE/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 708:CORE/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 709:CORE/core_cm3.h **** 
 710:CORE/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 711:CORE/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 712:CORE/core_cm3.h **** 
 713:CORE/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 714:CORE/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 715:CORE/core_cm3.h **** 
 716:CORE/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 717:CORE/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 718:CORE/core_cm3.h **** 
 719:CORE/core_cm3.h **** /* ITM Integration Write Register Definitions */
 720:CORE/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 721:CORE/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 722:CORE/core_cm3.h **** 
 723:CORE/core_cm3.h **** /* ITM Integration Read Register Definitions */
 724:CORE/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 725:CORE/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 726:CORE/core_cm3.h **** 
 727:CORE/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 728:CORE/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 729:CORE/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 730:CORE/core_cm3.h **** 
 731:CORE/core_cm3.h **** /* ITM Lock Status Register Definitions */
 732:CORE/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 733:CORE/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 734:CORE/core_cm3.h **** 
 735:CORE/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 736:CORE/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 737:CORE/core_cm3.h **** 
 738:CORE/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 739:CORE/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 740:CORE/core_cm3.h **** 
 741:CORE/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 742:CORE/core_cm3.h **** 
 743:CORE/core_cm3.h **** 
 744:CORE/core_cm3.h **** /** \ingroup  CMSIS_core_register
 745:CORE/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 746:CORE/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 747:CORE/core_cm3.h ****   @{
 748:CORE/core_cm3.h ****  */
 749:CORE/core_cm3.h **** 
 750:CORE/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 751:CORE/core_cm3.h ****  */
 752:CORE/core_cm3.h **** typedef struct
 753:CORE/core_cm3.h **** {
 754:CORE/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 755:CORE/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 756:CORE/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 757:CORE/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 758:CORE/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 759:CORE/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 760:CORE/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 761:CORE/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 762:CORE/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 16


 763:CORE/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 764:CORE/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 765:CORE/core_cm3.h ****        uint32_t RESERVED0[1];
 766:CORE/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 767:CORE/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 768:CORE/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 769:CORE/core_cm3.h ****        uint32_t RESERVED1[1];
 770:CORE/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 771:CORE/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 772:CORE/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 773:CORE/core_cm3.h ****        uint32_t RESERVED2[1];
 774:CORE/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 775:CORE/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 776:CORE/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 777:CORE/core_cm3.h **** } DWT_Type;
 778:CORE/core_cm3.h **** 
 779:CORE/core_cm3.h **** /* DWT Control Register Definitions */
 780:CORE/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 781:CORE/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 782:CORE/core_cm3.h **** 
 783:CORE/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 784:CORE/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 785:CORE/core_cm3.h **** 
 786:CORE/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 787:CORE/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 788:CORE/core_cm3.h **** 
 789:CORE/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 790:CORE/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 791:CORE/core_cm3.h **** 
 792:CORE/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 793:CORE/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 794:CORE/core_cm3.h **** 
 795:CORE/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 796:CORE/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 797:CORE/core_cm3.h **** 
 798:CORE/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 799:CORE/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 800:CORE/core_cm3.h **** 
 801:CORE/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 802:CORE/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 803:CORE/core_cm3.h **** 
 804:CORE/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 805:CORE/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 806:CORE/core_cm3.h **** 
 807:CORE/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 808:CORE/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 809:CORE/core_cm3.h **** 
 810:CORE/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 811:CORE/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 812:CORE/core_cm3.h **** 
 813:CORE/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 814:CORE/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 815:CORE/core_cm3.h **** 
 816:CORE/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 817:CORE/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 818:CORE/core_cm3.h **** 
 819:CORE/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 17


 820:CORE/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 821:CORE/core_cm3.h **** 
 822:CORE/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 823:CORE/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 824:CORE/core_cm3.h **** 
 825:CORE/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 826:CORE/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 827:CORE/core_cm3.h **** 
 828:CORE/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 829:CORE/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 830:CORE/core_cm3.h **** 
 831:CORE/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 832:CORE/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 833:CORE/core_cm3.h **** 
 834:CORE/core_cm3.h **** /* DWT CPI Count Register Definitions */
 835:CORE/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 836:CORE/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 837:CORE/core_cm3.h **** 
 838:CORE/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 839:CORE/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 840:CORE/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 841:CORE/core_cm3.h **** 
 842:CORE/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 843:CORE/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 844:CORE/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 845:CORE/core_cm3.h **** 
 846:CORE/core_cm3.h **** /* DWT LSU Count Register Definitions */
 847:CORE/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 848:CORE/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 849:CORE/core_cm3.h **** 
 850:CORE/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 851:CORE/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 852:CORE/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 853:CORE/core_cm3.h **** 
 854:CORE/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 855:CORE/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 856:CORE/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 857:CORE/core_cm3.h **** 
 858:CORE/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 859:CORE/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 860:CORE/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 861:CORE/core_cm3.h **** 
 862:CORE/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 863:CORE/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 864:CORE/core_cm3.h **** 
 865:CORE/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 866:CORE/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 867:CORE/core_cm3.h **** 
 868:CORE/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 869:CORE/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 870:CORE/core_cm3.h **** 
 871:CORE/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 872:CORE/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 873:CORE/core_cm3.h **** 
 874:CORE/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 875:CORE/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 876:CORE/core_cm3.h **** 
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 18


 877:CORE/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 878:CORE/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 879:CORE/core_cm3.h **** 
 880:CORE/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 881:CORE/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 882:CORE/core_cm3.h **** 
 883:CORE/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 884:CORE/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 885:CORE/core_cm3.h **** 
 886:CORE/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 887:CORE/core_cm3.h **** 
 888:CORE/core_cm3.h **** 
 889:CORE/core_cm3.h **** /** \ingroup  CMSIS_core_register
 890:CORE/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 891:CORE/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 892:CORE/core_cm3.h ****   @{
 893:CORE/core_cm3.h ****  */
 894:CORE/core_cm3.h **** 
 895:CORE/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 896:CORE/core_cm3.h ****  */
 897:CORE/core_cm3.h **** typedef struct
 898:CORE/core_cm3.h **** {
 899:CORE/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 900:CORE/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 901:CORE/core_cm3.h ****        uint32_t RESERVED0[2];
 902:CORE/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 903:CORE/core_cm3.h ****        uint32_t RESERVED1[55];
 904:CORE/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 905:CORE/core_cm3.h ****        uint32_t RESERVED2[131];
 906:CORE/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 907:CORE/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 908:CORE/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 909:CORE/core_cm3.h ****        uint32_t RESERVED3[759];
 910:CORE/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 911:CORE/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 912:CORE/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 913:CORE/core_cm3.h ****        uint32_t RESERVED4[1];
 914:CORE/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 915:CORE/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 916:CORE/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 917:CORE/core_cm3.h ****        uint32_t RESERVED5[39];
 918:CORE/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 919:CORE/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 920:CORE/core_cm3.h ****        uint32_t RESERVED7[8];
 921:CORE/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 922:CORE/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 923:CORE/core_cm3.h **** } TPI_Type;
 924:CORE/core_cm3.h **** 
 925:CORE/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 926:CORE/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 927:CORE/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 928:CORE/core_cm3.h **** 
 929:CORE/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 930:CORE/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 931:CORE/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 932:CORE/core_cm3.h **** 
 933:CORE/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 19


 934:CORE/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 935:CORE/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 936:CORE/core_cm3.h **** 
 937:CORE/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 938:CORE/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 939:CORE/core_cm3.h **** 
 940:CORE/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 941:CORE/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 942:CORE/core_cm3.h **** 
 943:CORE/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 944:CORE/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 945:CORE/core_cm3.h **** 
 946:CORE/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 947:CORE/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 948:CORE/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 949:CORE/core_cm3.h **** 
 950:CORE/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 951:CORE/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 952:CORE/core_cm3.h **** 
 953:CORE/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 954:CORE/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 955:CORE/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 956:CORE/core_cm3.h **** 
 957:CORE/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 958:CORE/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 959:CORE/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 960:CORE/core_cm3.h **** 
 961:CORE/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 962:CORE/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 963:CORE/core_cm3.h **** 
 964:CORE/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 965:CORE/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 966:CORE/core_cm3.h **** 
 967:CORE/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 968:CORE/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 969:CORE/core_cm3.h **** 
 970:CORE/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 971:CORE/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 972:CORE/core_cm3.h **** 
 973:CORE/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 974:CORE/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 975:CORE/core_cm3.h **** 
 976:CORE/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 977:CORE/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 978:CORE/core_cm3.h **** 
 979:CORE/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 980:CORE/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 981:CORE/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 982:CORE/core_cm3.h **** 
 983:CORE/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 984:CORE/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 985:CORE/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 986:CORE/core_cm3.h **** 
 987:CORE/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 988:CORE/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 989:CORE/core_cm3.h **** 
 990:CORE/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 20


 991:CORE/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 992:CORE/core_cm3.h **** 
 993:CORE/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 994:CORE/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 995:CORE/core_cm3.h **** 
 996:CORE/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 997:CORE/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 998:CORE/core_cm3.h **** 
 999:CORE/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
1000:CORE/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1001:CORE/core_cm3.h **** 
1002:CORE/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
1003:CORE/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
1004:CORE/core_cm3.h **** 
1005:CORE/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
1006:CORE/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
1007:CORE/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
1008:CORE/core_cm3.h **** 
1009:CORE/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
1010:CORE/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1011:CORE/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
1012:CORE/core_cm3.h **** 
1013:CORE/core_cm3.h **** /* TPI DEVID Register Definitions */
1014:CORE/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1015:CORE/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1016:CORE/core_cm3.h **** 
1017:CORE/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1018:CORE/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1019:CORE/core_cm3.h **** 
1020:CORE/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1021:CORE/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1022:CORE/core_cm3.h **** 
1023:CORE/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1024:CORE/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1025:CORE/core_cm3.h **** 
1026:CORE/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1027:CORE/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1028:CORE/core_cm3.h **** 
1029:CORE/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1030:CORE/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
1031:CORE/core_cm3.h **** 
1032:CORE/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1033:CORE/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1034:CORE/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
1035:CORE/core_cm3.h **** 
1036:CORE/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1037:CORE/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1038:CORE/core_cm3.h **** 
1039:CORE/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1040:CORE/core_cm3.h **** 
1041:CORE/core_cm3.h **** 
1042:CORE/core_cm3.h **** #if (__MPU_PRESENT == 1)
1043:CORE/core_cm3.h **** /** \ingroup  CMSIS_core_register
1044:CORE/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1045:CORE/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1046:CORE/core_cm3.h ****   @{
1047:CORE/core_cm3.h ****  */
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 21


1048:CORE/core_cm3.h **** 
1049:CORE/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1050:CORE/core_cm3.h ****  */
1051:CORE/core_cm3.h **** typedef struct
1052:CORE/core_cm3.h **** {
1053:CORE/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1054:CORE/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1055:CORE/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1056:CORE/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1057:CORE/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1058:CORE/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1059:CORE/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1060:CORE/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1061:CORE/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1062:CORE/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1063:CORE/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1064:CORE/core_cm3.h **** } MPU_Type;
1065:CORE/core_cm3.h **** 
1066:CORE/core_cm3.h **** /* MPU Type Register */
1067:CORE/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1068:CORE/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1069:CORE/core_cm3.h **** 
1070:CORE/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1071:CORE/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1072:CORE/core_cm3.h **** 
1073:CORE/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1074:CORE/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1075:CORE/core_cm3.h **** 
1076:CORE/core_cm3.h **** /* MPU Control Register */
1077:CORE/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1078:CORE/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1079:CORE/core_cm3.h **** 
1080:CORE/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1081:CORE/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1082:CORE/core_cm3.h **** 
1083:CORE/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1084:CORE/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1085:CORE/core_cm3.h **** 
1086:CORE/core_cm3.h **** /* MPU Region Number Register */
1087:CORE/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1088:CORE/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1089:CORE/core_cm3.h **** 
1090:CORE/core_cm3.h **** /* MPU Region Base Address Register */
1091:CORE/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1092:CORE/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1093:CORE/core_cm3.h **** 
1094:CORE/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1095:CORE/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1096:CORE/core_cm3.h **** 
1097:CORE/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1098:CORE/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1099:CORE/core_cm3.h **** 
1100:CORE/core_cm3.h **** /* MPU Region Attribute and Size Register */
1101:CORE/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1102:CORE/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1103:CORE/core_cm3.h **** 
1104:CORE/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 22


1105:CORE/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1106:CORE/core_cm3.h **** 
1107:CORE/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1108:CORE/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1109:CORE/core_cm3.h **** 
1110:CORE/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1111:CORE/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1112:CORE/core_cm3.h **** 
1113:CORE/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1114:CORE/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1115:CORE/core_cm3.h **** 
1116:CORE/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1117:CORE/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1118:CORE/core_cm3.h **** 
1119:CORE/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1120:CORE/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1121:CORE/core_cm3.h **** 
1122:CORE/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1123:CORE/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1124:CORE/core_cm3.h **** 
1125:CORE/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1126:CORE/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1127:CORE/core_cm3.h **** 
1128:CORE/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1129:CORE/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1130:CORE/core_cm3.h **** 
1131:CORE/core_cm3.h **** /*@} end of group CMSIS_MPU */
1132:CORE/core_cm3.h **** #endif
1133:CORE/core_cm3.h **** 
1134:CORE/core_cm3.h **** 
1135:CORE/core_cm3.h **** /** \ingroup  CMSIS_core_register
1136:CORE/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1137:CORE/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1138:CORE/core_cm3.h ****   @{
1139:CORE/core_cm3.h ****  */
1140:CORE/core_cm3.h **** 
1141:CORE/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1142:CORE/core_cm3.h ****  */
1143:CORE/core_cm3.h **** typedef struct
1144:CORE/core_cm3.h **** {
1145:CORE/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1146:CORE/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1147:CORE/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1148:CORE/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1149:CORE/core_cm3.h **** } CoreDebug_Type;
1150:CORE/core_cm3.h **** 
1151:CORE/core_cm3.h **** /* Debug Halting Control and Status Register */
1152:CORE/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1153:CORE/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1154:CORE/core_cm3.h **** 
1155:CORE/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1156:CORE/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1157:CORE/core_cm3.h **** 
1158:CORE/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1159:CORE/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1160:CORE/core_cm3.h **** 
1161:CORE/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 23


1162:CORE/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1163:CORE/core_cm3.h **** 
1164:CORE/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1165:CORE/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1166:CORE/core_cm3.h **** 
1167:CORE/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1168:CORE/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1169:CORE/core_cm3.h **** 
1170:CORE/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1171:CORE/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1172:CORE/core_cm3.h **** 
1173:CORE/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1174:CORE/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1175:CORE/core_cm3.h **** 
1176:CORE/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1177:CORE/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1178:CORE/core_cm3.h **** 
1179:CORE/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1180:CORE/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1181:CORE/core_cm3.h **** 
1182:CORE/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1183:CORE/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1184:CORE/core_cm3.h **** 
1185:CORE/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1186:CORE/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1187:CORE/core_cm3.h **** 
1188:CORE/core_cm3.h **** /* Debug Core Register Selector Register */
1189:CORE/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1190:CORE/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1191:CORE/core_cm3.h **** 
1192:CORE/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1193:CORE/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1194:CORE/core_cm3.h **** 
1195:CORE/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1196:CORE/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1197:CORE/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1198:CORE/core_cm3.h **** 
1199:CORE/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1200:CORE/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1201:CORE/core_cm3.h **** 
1202:CORE/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1203:CORE/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1204:CORE/core_cm3.h **** 
1205:CORE/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1206:CORE/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1207:CORE/core_cm3.h **** 
1208:CORE/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1209:CORE/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1210:CORE/core_cm3.h **** 
1211:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1212:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1213:CORE/core_cm3.h **** 
1214:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1215:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1216:CORE/core_cm3.h **** 
1217:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1218:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 24


1219:CORE/core_cm3.h **** 
1220:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1221:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1222:CORE/core_cm3.h **** 
1223:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1224:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1225:CORE/core_cm3.h **** 
1226:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1227:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1228:CORE/core_cm3.h **** 
1229:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1230:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1231:CORE/core_cm3.h **** 
1232:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1233:CORE/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1234:CORE/core_cm3.h **** 
1235:CORE/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1236:CORE/core_cm3.h **** 
1237:CORE/core_cm3.h **** 
1238:CORE/core_cm3.h **** /** \ingroup    CMSIS_core_register
1239:CORE/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1240:CORE/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1241:CORE/core_cm3.h ****   @{
1242:CORE/core_cm3.h ****  */
1243:CORE/core_cm3.h **** 
1244:CORE/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1245:CORE/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1246:CORE/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1247:CORE/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1248:CORE/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1249:CORE/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1250:CORE/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1251:CORE/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1252:CORE/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1253:CORE/core_cm3.h **** 
1254:CORE/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1255:CORE/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1256:CORE/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1257:CORE/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1258:CORE/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1259:CORE/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1260:CORE/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1261:CORE/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1262:CORE/core_cm3.h **** 
1263:CORE/core_cm3.h **** #if (__MPU_PRESENT == 1)
1264:CORE/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1265:CORE/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1266:CORE/core_cm3.h **** #endif
1267:CORE/core_cm3.h **** 
1268:CORE/core_cm3.h **** /*@} */
1269:CORE/core_cm3.h **** 
1270:CORE/core_cm3.h **** 
1271:CORE/core_cm3.h **** 
1272:CORE/core_cm3.h **** /*******************************************************************************
1273:CORE/core_cm3.h ****  *                Hardware Abstraction Layer
1274:CORE/core_cm3.h ****   Core Function Interface contains:
1275:CORE/core_cm3.h ****   - Core NVIC Functions
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 25


1276:CORE/core_cm3.h ****   - Core SysTick Functions
1277:CORE/core_cm3.h ****   - Core Debug Functions
1278:CORE/core_cm3.h ****   - Core Register Access Functions
1279:CORE/core_cm3.h ****  ******************************************************************************/
1280:CORE/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1281:CORE/core_cm3.h **** */
1282:CORE/core_cm3.h **** 
1283:CORE/core_cm3.h **** 
1284:CORE/core_cm3.h **** 
1285:CORE/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1286:CORE/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1287:CORE/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1288:CORE/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1289:CORE/core_cm3.h ****     @{
1290:CORE/core_cm3.h ****  */
1291:CORE/core_cm3.h **** 
1292:CORE/core_cm3.h **** /** \brief  Set Priority Grouping
1293:CORE/core_cm3.h **** 
1294:CORE/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1295:CORE/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1296:CORE/core_cm3.h ****   Only values from 0..7 are used.
1297:CORE/core_cm3.h ****   In case of a conflict between priority grouping and available
1298:CORE/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1299:CORE/core_cm3.h **** 
1300:CORE/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1301:CORE/core_cm3.h ****  */
1302:CORE/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1303:CORE/core_cm3.h **** {
1304:CORE/core_cm3.h ****   uint32_t reg_value;
1305:CORE/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1306:CORE/core_cm3.h **** 
1307:CORE/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1308:CORE/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1309:CORE/core_cm3.h ****   reg_value  =  (reg_value                                 |
1310:CORE/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1311:CORE/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1312:CORE/core_cm3.h ****   SCB->AIRCR =  reg_value;
1313:CORE/core_cm3.h **** }
1314:CORE/core_cm3.h **** 
1315:CORE/core_cm3.h **** 
1316:CORE/core_cm3.h **** /** \brief  Get Priority Grouping
1317:CORE/core_cm3.h **** 
1318:CORE/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1319:CORE/core_cm3.h **** 
1320:CORE/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1321:CORE/core_cm3.h ****  */
1322:CORE/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1323:CORE/core_cm3.h **** {
1324:CORE/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1325:CORE/core_cm3.h **** }
1326:CORE/core_cm3.h **** 
1327:CORE/core_cm3.h **** 
1328:CORE/core_cm3.h **** /** \brief  Enable External Interrupt
1329:CORE/core_cm3.h **** 
1330:CORE/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1331:CORE/core_cm3.h **** 
1332:CORE/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 26


1333:CORE/core_cm3.h ****  */
1334:CORE/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1335:CORE/core_cm3.h **** {
1336:CORE/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1337:CORE/core_cm3.h **** }
1338:CORE/core_cm3.h **** 
1339:CORE/core_cm3.h **** 
1340:CORE/core_cm3.h **** /** \brief  Disable External Interrupt
1341:CORE/core_cm3.h **** 
1342:CORE/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1343:CORE/core_cm3.h **** 
1344:CORE/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1345:CORE/core_cm3.h ****  */
1346:CORE/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1347:CORE/core_cm3.h **** {
1348:CORE/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1349:CORE/core_cm3.h **** }
1350:CORE/core_cm3.h **** 
1351:CORE/core_cm3.h **** 
1352:CORE/core_cm3.h **** /** \brief  Get Pending Interrupt
1353:CORE/core_cm3.h **** 
1354:CORE/core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1355:CORE/core_cm3.h ****     for the specified interrupt.
1356:CORE/core_cm3.h **** 
1357:CORE/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1358:CORE/core_cm3.h **** 
1359:CORE/core_cm3.h ****     \return             0  Interrupt status is not pending.
1360:CORE/core_cm3.h ****     \return             1  Interrupt status is pending.
1361:CORE/core_cm3.h ****  */
1362:CORE/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1363:CORE/core_cm3.h **** {
1364:CORE/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1365:CORE/core_cm3.h **** }
1366:CORE/core_cm3.h **** 
1367:CORE/core_cm3.h **** 
1368:CORE/core_cm3.h **** /** \brief  Set Pending Interrupt
1369:CORE/core_cm3.h **** 
1370:CORE/core_cm3.h ****     The function sets the pending bit of an external interrupt.
1371:CORE/core_cm3.h **** 
1372:CORE/core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1373:CORE/core_cm3.h ****  */
1374:CORE/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1375:CORE/core_cm3.h **** {
1376:CORE/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1377:CORE/core_cm3.h **** }
1378:CORE/core_cm3.h **** 
1379:CORE/core_cm3.h **** 
1380:CORE/core_cm3.h **** /** \brief  Clear Pending Interrupt
1381:CORE/core_cm3.h **** 
1382:CORE/core_cm3.h ****     The function clears the pending bit of an external interrupt.
1383:CORE/core_cm3.h **** 
1384:CORE/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1385:CORE/core_cm3.h ****  */
1386:CORE/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1387:CORE/core_cm3.h **** {
1388:CORE/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1389:CORE/core_cm3.h **** }
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 27


1390:CORE/core_cm3.h **** 
1391:CORE/core_cm3.h **** 
1392:CORE/core_cm3.h **** /** \brief  Get Active Interrupt
1393:CORE/core_cm3.h **** 
1394:CORE/core_cm3.h ****     The function reads the active register in NVIC and returns the active bit.
1395:CORE/core_cm3.h **** 
1396:CORE/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1397:CORE/core_cm3.h **** 
1398:CORE/core_cm3.h ****     \return             0  Interrupt status is not active.
1399:CORE/core_cm3.h ****     \return             1  Interrupt status is active.
1400:CORE/core_cm3.h ****  */
1401:CORE/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1402:CORE/core_cm3.h **** {
1403:CORE/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1404:CORE/core_cm3.h **** }
1405:CORE/core_cm3.h **** 
1406:CORE/core_cm3.h **** 
1407:CORE/core_cm3.h **** /** \brief  Set Interrupt Priority
1408:CORE/core_cm3.h **** 
1409:CORE/core_cm3.h ****     The function sets the priority of an interrupt.
1410:CORE/core_cm3.h **** 
1411:CORE/core_cm3.h ****     \note The priority cannot be set for every core interrupt.
1412:CORE/core_cm3.h **** 
1413:CORE/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1414:CORE/core_cm3.h ****     \param [in]  priority  Priority to set.
1415:CORE/core_cm3.h ****  */
1416:CORE/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1417:CORE/core_cm3.h **** {
1418:CORE/core_cm3.h ****   if(IRQn < 0) {
1419:CORE/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1420:CORE/core_cm3.h ****   else {
1421:CORE/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1422:CORE/core_cm3.h **** }
1423:CORE/core_cm3.h **** 
1424:CORE/core_cm3.h **** 
1425:CORE/core_cm3.h **** /** \brief  Get Interrupt Priority
1426:CORE/core_cm3.h **** 
1427:CORE/core_cm3.h ****     The function reads the priority of an interrupt. The interrupt
1428:CORE/core_cm3.h ****     number can be positive to specify an external (device specific)
1429:CORE/core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
1430:CORE/core_cm3.h **** 
1431:CORE/core_cm3.h **** 
1432:CORE/core_cm3.h ****     \param [in]   IRQn  Interrupt number.
1433:CORE/core_cm3.h ****     \return             Interrupt Priority. Value is aligned automatically to the implemented
1434:CORE/core_cm3.h ****                         priority bits of the microcontroller.
1435:CORE/core_cm3.h ****  */
1436:CORE/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1437:CORE/core_cm3.h **** {
1438:CORE/core_cm3.h **** 
1439:CORE/core_cm3.h ****   if(IRQn < 0) {
1440:CORE/core_cm3.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1441:CORE/core_cm3.h ****   else {
1442:CORE/core_cm3.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1443:CORE/core_cm3.h **** }
1444:CORE/core_cm3.h **** 
1445:CORE/core_cm3.h **** 
1446:CORE/core_cm3.h **** /** \brief  Encode Priority
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 28


1447:CORE/core_cm3.h **** 
1448:CORE/core_cm3.h ****     The function encodes the priority for an interrupt with the given priority group,
1449:CORE/core_cm3.h ****     preemptive priority value, and subpriority value.
1450:CORE/core_cm3.h ****     In case of a conflict between priority grouping and available
1451:CORE/core_cm3.h ****     priority bits (__NVIC_PRIO_BITS), the samllest possible priority group is set.
1452:CORE/core_cm3.h **** 
1453:CORE/core_cm3.h ****     \param [in]     PriorityGroup  Used priority group.
1454:CORE/core_cm3.h ****     \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1455:CORE/core_cm3.h ****     \param [in]       SubPriority  Subpriority value (starting from 0).
1456:CORE/core_cm3.h ****     \return                        Encoded priority. Value can be used in the function \ref NVIC_Se
1457:CORE/core_cm3.h ****  */
1458:CORE/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1459:CORE/core_cm3.h **** {
1460:CORE/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1461:CORE/core_cm3.h ****   uint32_t PreemptPriorityBits;
1462:CORE/core_cm3.h ****   uint32_t SubPriorityBits;
1463:CORE/core_cm3.h **** 
1464:CORE/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1465:CORE/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1466:CORE/core_cm3.h **** 
1467:CORE/core_cm3.h ****   return (
1468:CORE/core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1469:CORE/core_cm3.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1470:CORE/core_cm3.h ****          );
1471:CORE/core_cm3.h **** }
1472:CORE/core_cm3.h **** 
1473:CORE/core_cm3.h **** 
1474:CORE/core_cm3.h **** /** \brief  Decode Priority
1475:CORE/core_cm3.h **** 
1476:CORE/core_cm3.h ****     The function decodes an interrupt priority value with a given priority group to
1477:CORE/core_cm3.h ****     preemptive priority value and subpriority value.
1478:CORE/core_cm3.h ****     In case of a conflict between priority grouping and available
1479:CORE/core_cm3.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1480:CORE/core_cm3.h **** 
1481:CORE/core_cm3.h ****     \param [in]         Priority   Priority value, which can be retrieved with the function \ref NV
1482:CORE/core_cm3.h ****     \param [in]     PriorityGroup  Used priority group.
1483:CORE/core_cm3.h ****     \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1484:CORE/core_cm3.h ****     \param [out]     pSubPriority  Subpriority value (starting from 0).
1485:CORE/core_cm3.h ****  */
1486:CORE/core_cm3.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1487:CORE/core_cm3.h **** {
1488:CORE/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1489:CORE/core_cm3.h ****   uint32_t PreemptPriorityBits;
1490:CORE/core_cm3.h ****   uint32_t SubPriorityBits;
1491:CORE/core_cm3.h **** 
1492:CORE/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1493:CORE/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1494:CORE/core_cm3.h **** 
1495:CORE/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1496:CORE/core_cm3.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1497:CORE/core_cm3.h **** }
1498:CORE/core_cm3.h **** 
1499:CORE/core_cm3.h **** 
1500:CORE/core_cm3.h **** /** \brief  System Reset
1501:CORE/core_cm3.h **** 
1502:CORE/core_cm3.h ****     The function initiates a system reset request to reset the MCU.
1503:CORE/core_cm3.h ****  */
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 29


1504:CORE/core_cm3.h **** __STATIC_INLINE void NVIC_SystemReset(void)
1505:CORE/core_cm3.h **** {
1506:CORE/core_cm3.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
1507:CORE/core_cm3.h ****                                                                   buffered write are completed befo
1508:CORE/core_cm3.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
1509:CORE/core_cm3.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1510:CORE/core_cm3.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
1511:CORE/core_cm3.h ****   __DSB();                                                     /* Ensure completion of memory acces
1512:CORE/core_cm3.h ****   while(1);                                                    /* wait until reset */
1513:CORE/core_cm3.h **** }
1514:CORE/core_cm3.h **** 
1515:CORE/core_cm3.h **** /*@} end of CMSIS_Core_NVICFunctions */
1516:CORE/core_cm3.h **** 
1517:CORE/core_cm3.h **** 
1518:CORE/core_cm3.h **** 
1519:CORE/core_cm3.h **** /* ##################################    SysTick function  ########################################
1520:CORE/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1521:CORE/core_cm3.h ****     \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1522:CORE/core_cm3.h ****     \brief      Functions that configure the System.
1523:CORE/core_cm3.h ****   @{
1524:CORE/core_cm3.h ****  */
1525:CORE/core_cm3.h **** 
1526:CORE/core_cm3.h **** #if (__Vendor_SysTickConfig == 0)
1527:CORE/core_cm3.h **** 
1528:CORE/core_cm3.h **** /** \brief  System Tick Configuration
1529:CORE/core_cm3.h **** 
1530:CORE/core_cm3.h ****     The function initializes the System Timer and its interrupt, and starts the System Tick Timer.
1531:CORE/core_cm3.h ****     Counter is in free running mode to generate periodic interrupts.
1532:CORE/core_cm3.h **** 
1533:CORE/core_cm3.h ****     \param [in]  ticks  Number of ticks between two interrupts.
1534:CORE/core_cm3.h **** 
1535:CORE/core_cm3.h ****     \return          0  Function succeeded.
1536:CORE/core_cm3.h ****     \return          1  Function failed.
1537:CORE/core_cm3.h **** 
1538:CORE/core_cm3.h ****     \note     When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1539:CORE/core_cm3.h ****     function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
1540:CORE/core_cm3.h ****     must contain a vendor-specific implementation of this function.
1541:CORE/core_cm3.h **** 
1542:CORE/core_cm3.h ****  */
1543:CORE/core_cm3.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
  43              		.loc 2 1543 26 is_stmt 1 view .LVU3
  44              	.LBB11:
1544:CORE/core_cm3.h **** {
1545:CORE/core_cm3.h ****   if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  45              		.loc 2 1545 3 view .LVU4
  46              		.loc 2 1545 14 is_stmt 0 view .LVU5
  47 000c 013B     		subs	r3, r3, #1
  48              	.LVL1:
  49              		.loc 2 1545 6 view .LVU6
  50 000e B3F1807F 		cmp	r3, #16777216
  51 0012 0DD2     		bcs	.L2
1546:CORE/core_cm3.h **** 
1547:CORE/core_cm3.h ****   SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  52              		.loc 2 1547 3 is_stmt 1 view .LVU7
  53              		.loc 2 1547 18 is_stmt 0 view .LVU8
  54 0014 4FF0E022 		mov	r2, #-536813568
  55 0018 5361     		str	r3, [r2, #20]
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 30


1548:CORE/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrup
  56              		.loc 2 1548 3 is_stmt 1 view .LVU9
  57              	.LVL2:
  58              	.LBB12:
  59              	.LBI12:
1416:CORE/core_cm3.h **** {
  60              		.loc 2 1416 22 view .LVU10
  61              	.LBB13:
1418:CORE/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  62              		.loc 2 1418 3 view .LVU11
1419:CORE/core_cm3.h ****   else {
  63              		.loc 2 1419 5 view .LVU12
1419:CORE/core_cm3.h ****   else {
  64              		.loc 2 1419 42 is_stmt 0 view .LVU13
  65 001a 084B     		ldr	r3, .L4+8
  66              	.LVL3:
1419:CORE/core_cm3.h ****   else {
  67              		.loc 2 1419 42 view .LVU14
  68 001c F021     		movs	r1, #240
  69 001e 83F82310 		strb	r1, [r3, #35]
  70              	.LVL4:
1419:CORE/core_cm3.h ****   else {
  71              		.loc 2 1419 42 view .LVU15
  72              	.LBE13:
  73              	.LBE12:
1549:CORE/core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  74              		.loc 2 1549 3 is_stmt 1 view .LVU16
  75              		.loc 2 1549 18 is_stmt 0 view .LVU17
  76 0022 0021     		movs	r1, #0
  77 0024 9161     		str	r1, [r2, #24]
1550:CORE/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  78              		.loc 2 1550 3 is_stmt 1 view .LVU18
  79              		.loc 2 1550 18 is_stmt 0 view .LVU19
  80 0026 0720     		movs	r0, #7
  81 0028 1061     		str	r0, [r2, #16]
1551:CORE/core_cm3.h ****                    SysTick_CTRL_TICKINT_Msk   |
1552:CORE/core_cm3.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
1553:CORE/core_cm3.h ****   return (0);                                                  /* Function successful */
  82              		.loc 2 1553 3 is_stmt 1 view .LVU20
  83              		.loc 2 1553 3 is_stmt 0 view .LVU21
  84              	.LBE11:
  85              	.LBE10:
  53:USER/systick.c ****         /* capture error */
  54:USER/systick.c ****         while (1){
  55:USER/systick.c ****         }
  56:USER/systick.c ****     }
  57:USER/systick.c ****     /* configure the systick handler priority */
  58:USER/systick.c ****     NVIC_SetPriority(SysTick_IRQn, 0x00U);
  86              		.loc 1 58 5 is_stmt 1 view .LVU22
  87              	.LVL5:
  88              	.LBB14:
  89              	.LBI14:
1416:CORE/core_cm3.h **** {
  90              		.loc 2 1416 22 view .LVU23
  91              	.LBB15:
1418:CORE/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  92              		.loc 2 1418 3 view .LVU24
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 31


1419:CORE/core_cm3.h ****   else {
  93              		.loc 2 1419 5 view .LVU25
1419:CORE/core_cm3.h ****   else {
  94              		.loc 2 1419 42 is_stmt 0 view .LVU26
  95 002a 83F82310 		strb	r1, [r3, #35]
  96              	.LVL6:
1419:CORE/core_cm3.h ****   else {
  97              		.loc 2 1419 42 view .LVU27
  98              	.LBE15:
  99              	.LBE14:
  59:USER/systick.c **** }
 100              		.loc 1 59 1 view .LVU28
 101 002e 7047     		bx	lr
 102              	.L2:
  54:USER/systick.c ****         }
 103              		.loc 1 54 9 is_stmt 1 discriminator 1 view .LVU29
  55:USER/systick.c ****     }
 104              		.loc 1 55 9 discriminator 1 view .LVU30
  54:USER/systick.c ****         }
 105              		.loc 1 54 15 discriminator 1 view .LVU31
 106 0030 FEE7     		b	.L2
 107              	.L5:
 108 0032 00BF     		.align	2
 109              	.L4:
 110 0034 00000000 		.word	SystemCoreClock
 111 0038 D34D6210 		.word	274877907
 112 003c 00ED00E0 		.word	-536810240
 113              		.cfi_endproc
 114              	.LFE56:
 116              		.section	.bss.delay,"aw",%nobits
 117              		.align	2
 120              	delay:
 121 0000 00000000 		.space	4
 122              		.text
 123              	.Letext0:
 124              		.file 3 "CORE\\GD\\GD32F10x\\Include/gd32f10x.h"
 125              		.file 4 "e:\\gcc-arm-none-eabi-10.3-2021.10-win32\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\
 126              		.file 5 "e:\\gcc-arm-none-eabi-10.3-2021.10-win32\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\
 127              		.file 6 "CORE\\GD\\GD32F10x\\Include/system_gd32f10x.h"
ARM GAS  C:\Users\CL\AppData\Local\Temp\ccJkWciX.s 			page 32


DEFINED SYMBOLS
                            *ABS*:00000000 systick.c
C:\Users\CL\AppData\Local\Temp\ccJkWciX.s:18     .text.systick_config:00000000 $t
C:\Users\CL\AppData\Local\Temp\ccJkWciX.s:24     .text.systick_config:00000000 systick_config
C:\Users\CL\AppData\Local\Temp\ccJkWciX.s:110    .text.systick_config:00000034 $d
C:\Users\CL\AppData\Local\Temp\ccJkWciX.s:117    .bss.delay:00000000 $d
C:\Users\CL\AppData\Local\Temp\ccJkWciX.s:120    .bss.delay:00000000 delay

UNDEFINED SYMBOLS
SystemCoreClock
